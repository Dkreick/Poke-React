{"version":3,"sources":["components/header/header.js","components/pokemon-list/pokemonList.js","components/pagination/pagination.js","components/pokedex/pokedex.js","components/app/app.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","toolbar","backgroundColor","title","Header","classes","t","useTranslation","className","AppBar","position","Toolbar","Typography","variant","modal","display","alignItems","justifyContent","paper","palette","background","border","boxShadow","shadows","padding","spacing","table","minWidth","PokemonList","pokemon","React","useState","open","setOpen","selectedPokemon","setselectedPokemon","useTheme","fullScreen","useMediaQuery","breakpoints","down","handleClose","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","key","name","onClick","data","console","log","scope","id","type","weight","src","sprites","front_default","alt","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","autoFocus","color","Pagination","gotoNextPage","gotoPrevPage","IconButton","disabled","Pokedex","setPokemon","currentPageUrl","setCurrentPageUrl","nextPageUrl","setNextPageUrl","prevPageUrl","setPrevPageUrl","loading","setLoading","useEffect","cancel","axios","get","cancelToken","CancelToken","c","then","res","next","previous","results","p","url","App","Boolean","window","location","hostname","match","i18next","init","interpolation","escapeValue","lng","resources","en","common","common_en","es","common_es","ReactDOM","render","StrictMode","I18nextProvider","i18n","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c7dccaee.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { useTranslation } from \"react-i18next\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  toolbar: {\n    backgroundColor: \"#CC0000\",\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function Header() {\n  const classes = useStyles();\n  const { t } = useTranslation(\"common\");\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar className={classes.toolbar}>\n          <Typography variant=\"h6\" className={classes.title}>\n            {t(\"welcome.title\")}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { useTheme } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n  table: {\n    minWidth: 650,\n  },\n}));\n\nexport default function PokemonList({ pokemon }) {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const [selectedPokemon, setselectedPokemon] = React.useState(false);\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\n\n  const handleOpen = (data) => {\n    console.log(data);\n    setselectedPokemon(data);\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>ID</TableCell>\n            <TableCell align=\"right\">Name</TableCell>\n            <TableCell align=\"right\">Type</TableCell>\n            <TableCell align=\"right\">Weight</TableCell>\n            <TableCell align=\"right\">Preview</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {pokemon.map((pokemon) => (\n            <TableRow key={pokemon.name} onClick={() => handleOpen(pokemon)}>\n              <TableCell component=\"th\" scope=\"row\">\n                {pokemon.id}\n              </TableCell>\n              <TableCell align=\"right\">{pokemon.name}</TableCell>\n              <TableCell align=\"right\">{pokemon.type}</TableCell>\n              <TableCell align=\"right\">{pokemon.weight}</TableCell>\n              <TableCell align=\"right\">\n                <img src={pokemon.sprites.front_default} alt=\"\"></img>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n      <Dialog\n        fullScreen={fullScreen}\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">\n          {selectedPokemon.name}\n        </DialogTitle>\n        <DialogContent>\n          {/* <img src={selectedPokemon.sprites.front_default} alt=\"\"></img> */}\n          <DialogContentText>{selectedPokemon.name}</DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </TableContainer>\n  );\n}\n","import React from \"react\";\nimport NavigateBeforeIcon from \"@material-ui/icons/NavigateBefore\";\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\nimport IconButton from \"@material-ui/core/IconButton\";\n\nexport default function Pagination({ gotoNextPage, gotoPrevPage }) {\n  return (\n    <div>\n      <IconButton disabled={!gotoPrevPage} onClick={gotoPrevPage}>\n        <NavigateBeforeIcon />\n      </IconButton>\n      <IconButton disabled={!gotoNextPage} onClick={gotoNextPage}>\n        <NavigateNextIcon />\n      </IconButton>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport PokemonList from \"../pokemon-list/pokemonList\";\nimport axios from \"axios\";\nimport Pagination from \"../pagination/pagination\";\n\nfunction Pokedex() {\n  const [pokemon, setPokemon] = useState([]);\n  const [currentPageUrl, setCurrentPageUrl] = useState(\n    \"https://pokeapi.co/api/v2/pokemon?limit=5\"\n  );\n  const [nextPageUrl, setNextPageUrl] = useState();\n  const [prevPageUrl, setPrevPageUrl] = useState();\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    setLoading(true);\n    let cancel;\n    axios\n      .get(currentPageUrl, {\n        cancelToken: new axios.CancelToken((c) => (cancel = c)),\n      })\n      .then((res) => {\n        setLoading(false);\n        setNextPageUrl(res.data.next);\n        setPrevPageUrl(res.data.previous);\n        res.data.results.map((p) => {\n          axios\n            .get(p.url, {\n              cancelToken: new axios.CancelToken((c) => (cancel = c)),\n            })\n            .then((res) => {\n              setPokemon((pokemon) => [...pokemon, res.data]);\n            });\n            return [];\n        });\n      });\n\n    return () => cancel();\n  }, [currentPageUrl]);\n\n  function gotoNextPage() {\n    setPokemon([]);\n    setCurrentPageUrl(nextPageUrl);\n  }\n\n  function gotoPrevPage() {\n    setPokemon([]);\n    setCurrentPageUrl(prevPageUrl);\n  }\n\n  if (loading) return \"Loading...\";\n  return (\n    <>\n      <PokemonList pokemon={pokemon} />\n      <Pagination\n        gotoNextPage={nextPageUrl ? gotoNextPage : null}\n        gotoPrevPage={prevPageUrl ? gotoPrevPage : null}\n      />\n    </>\n  );\n}\n\nexport default Pokedex;\n","import React from \"react\";\nimport \"./app.scss\";\nimport Header from \"../header/header\";\nimport Pokedex from \"../pokedex/pokedex\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <Pokedex></Pokedex>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./components/app/app\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { I18nextProvider } from \"react-i18next\";\nimport i18next from \"i18next\";\nimport common_en from \"./translations/en/common.json\";\nimport common_es from \"./translations/es/common.json\";\n\ni18next.init({\n  interpolation: { escapeValue: false },\n  lng: \"en\",\n  resources: {\n    en: {\n      common: common_en,\n    },\n    es: {\n      common: common_es,\n    },\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <I18nextProvider i18n={i18next}>\n      <App />\n    </I18nextProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}