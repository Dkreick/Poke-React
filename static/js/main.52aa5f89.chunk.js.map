{"version":3,"sources":["components/header/header.js","components/pokedex/pokedex.js","components/app/app.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","toolbar","backgroundColor","title","Header","classes","className","AppBar","position","Toolbar","Typography","variant","Pokedex","state","rows","createRow","pokemon","url","fetch","then","response","json","pokeData","console","log","setState","prevState","allpokemon","results","forEach","catch","err","columns","field","type","lookup","34","63","data","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"iSAMMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,QAAS,CACPC,gBAAiB,WAEnBC,MAAO,CACLH,SAAU,OAIC,SAASI,IACtB,IAAMC,EAAUT,IAEhB,OACE,yBAAKU,UAAWD,EAAQN,MACtB,kBAACQ,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,CAASH,UAAWD,EAAQJ,SAC1B,kBAACS,EAAA,EAAD,CAAYC,QAAQ,KAAKL,UAAWD,EAAQF,OAA5C,iB,mEC0BKS,E,4MA/CbC,MAAQ,CAAEC,KAAM,I,EAahBC,UAAY,SAACC,GACX,IAAMC,EAAMD,EAAQC,IACpBC,MAAMD,GACHE,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLC,QAAQC,IAAIF,GACZ,EAAKG,UAAS,SAACC,GAAD,MAAgB,CAC5BZ,KAAK,GAAD,mBAAMY,EAAUZ,MAAhB,CAAsBQ,Y,kEAlBb,IAAD,OAClBJ,MAAM,+CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACQ,GACLA,EAAWC,QAAQC,SAAQ,SAACb,GAC1B,EAAKD,UAAUC,SAGlBc,OAAM,SAACC,GAAD,OAASR,QAAQC,IAAIO,Q,+BAgB9B,OACE,6BACE,kBAAC,IAAD,CACEC,QAAS,CACP,CAAE7B,MAAO,OAAQ8B,MAAO,QACxB,CAAE9B,MAAO,cAAU8B,MAAO,WAC1B,CAAE9B,MAAO,4BAAc8B,MAAO,YAAaC,KAAM,WACjD,CACE/B,MAAO,kBACP8B,MAAO,YACPE,OAAQ,CAAEC,GAAI,gBAAYC,GAAI,yBAGlCC,KAAMC,KAAK1B,MAAMC,KACjBX,MAAM,oB,GAzCMqC,aCWPC,MATf,WACE,OACE,yBAAKnC,UAAU,OACb,kBAACF,EAAD,MACA,kBAAC,EAAD,QCGcsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAACoC,GACLA,EAAaC,gBAEd1B,OAAM,SAAC2B,GACNlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.52aa5f89.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  toolbar: {\n    backgroundColor: \"#CC0000\",\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function Header() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar className={classes.toolbar}>\n          <Typography variant=\"h6\" className={classes.title}>\n            Poke React\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport MaterialTable from \"material-table\";\n\nclass Pokedex extends Component {\n  state = { rows: [] };\n\n  componentDidMount() {\n    fetch(\"https://pokeapi.co/api/v2/pokemon?limit=151\")\n      .then((response) => response.json())\n      .then((allpokemon) => {\n        allpokemon.results.forEach((pokemon) => {\n          this.createRow(pokemon);\n        });\n      })\n      .catch((err) => console.log(err));\n  }\n\n  createRow = (pokemon) => {\n    const url = pokemon.url;\n    fetch(url)\n      .then((response) => response.json())\n      .then((pokeData) => {\n        console.log(pokeData);\n        this.setState((prevState) => ({\n          rows: [...prevState.rows, pokeData],\n        }));\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        <MaterialTable\n          columns={[\n            { title: \"Name\", field: \"name\" },\n            { title: \"Soyadı\", field: \"surname\" },\n            { title: \"Doğum Yılı\", field: \"birthYear\", type: \"numeric\" },\n            {\n              title: \"Doğum Yeri\",\n              field: \"birthCity\",\n              lookup: { 34: \"İstanbul\", 63: \"Şanlıurfa\" },\n            },\n          ]}\n          data={this.state.rows}\n          title=\"Demo Title\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default Pokedex;\n","import React from \"react\";\nimport \"./app.scss\";\nimport Header from \"../header/header\";\nimport Pokedex from \"../pokedex/pokedex\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <Pokedex></Pokedex>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./components/app/app\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}